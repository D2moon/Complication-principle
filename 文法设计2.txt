程序		:: <声明串>
<声明串>		:: <声明>  {<声明>}
<声明>		:: int <ID> <声明类型> || void <ID> <函数声明>
<声明类型>	:: <变量声明> +mm2+ || <函数声明>
<变量声明>	:: ';'
<函数声明>	:: '(' <形参> ')' +tt2+ <语句块> +tt3+
<形参>		:: <参数表> || '!'
<参数表>		:: <参数> {, <参数>}
<参数>		:: int <ID> +mm4+                                              # mm4记下参数存入对应函数表
<语句块>		:: '{' <内部声明> <语句串> '}'
<内部声明>	:: 空 || <内部变量声明> { <内部变量声明> }
<内部变量声明>:: int <ID>; +mm5+                                            # mm5写入函数内部符号表
<语句串>		:: <语句> {<语句>}
<语句>		:: <if语句> || <while语句> || <return语句> || <ID> +mm12+ <赋值|调用语句>
<if语句>	:: if '(' +mm6+ <表达式> ')'  <语句块>  [else +mm14+ <语句块> ] +mm15+       # if语句
<while语句>	:: while '(' +mm6+ <表达式> ')' <语句块> +mm16+                             # while语句
<return语句> :: return +mm10+ [ <加法表达式>  ] +mm11+ ';'                              # return语句
<for语句>    :: for '('     ;      ;   ')' <语句块>




<赋值|调用语句>:: '=' <加法表达式> +mm13+ ';'                                     # 赋值语句
<赋值|调用语句>:: <call> +pp4+ ';'
<表达式>		:: <加法表达式> +mm7+ relop +mm8+ <加法表达式> +mm9+
relop 为< > == != >= <= 一种
加法表达式 :: E
E :: T E'
E' :: w1 T E' || 空
T :: F T'
T' :: w2 F T' || 空
F :: num || (E) || <ID> FUN                                                         # num对应常数表
w1:: + || -
w2:: * || /
FUN 		:: <call> || 空
<call> 		:: '(' +pp1+ +kk2+ <实参列表> ')' +pp2+								    # pp1调用函数
<实参列表>	:: <加法表达式> +kk3+ {, +kk4+ <加法表达式> +kk5+ } || ! +kk3+			# kk2开始，kk3结束
<ID>		:: 字母 {字母 || 数字}


mm1 ~          语义动作




